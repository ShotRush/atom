plugins {
    id 'java'
    id 'com.gradleup.shadow' version '8.3.5'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'org.shotrush.atom.atom'
version = '5.0-ALPHA'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "aikar"
        url = "https://repo.aikar.co/content/groups/aikar/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.8-R0.1-SNAPSHOT")
    implementation("co.aikar:acf-paper:0.5.1-SNAPSHOT")
    implementation("com.zaxxer:HikariCP:5.1.0")
    implementation("org.xerial:sqlite-jdbc:3.46.1.0")
    implementation("com.github.ben-manes.caffeine:caffeine:3.1.8")
    implementation("org.yaml:snakeyaml:2.2")
    implementation("com.google.code.gson:gson:2.10.1")
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    relocate 'co.aikar.commands', 'org.shotrush.atom.acf'
    relocate 'co.aikar.locales', 'org.shotrush.atom.locales'
    relocate 'com.zaxxer.hikari', 'org.shotrush.atom.hikari'
    relocate 'com.github.benmanes.caffeine', 'org.shotrush.atom.caffeine'
    relocate 'com.google.gson', 'org.shotrush.atom.gson'
    archiveClassifier.set('')
}

build {
    dependsOn shadowJar
}